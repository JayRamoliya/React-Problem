Link: https://www.youtube.com/watch?v=UxW-R3nrieY

30+ React JS Practice Problems || Master React JS 2024

npm create vite@latest
npm i
npm run dev

clean a all file

Task 1: create a simple "Hello World" React components
        - create a components folder 
        - inside a HelloWorld.jsx file and write a code
    

Task 2: build a counter application with increment and drecement buttons
        - create CounterApp.jsx file
        - using useState hooks to component re render with onclick event and change + - counter value


Task 3: create a form that takes user input and display it in real time
        - create FormInput.jsx file
        - using useState hooks to live user input show with onchange event and e.target.value 


Task 4: build a list component to display a list items
        - create ListItems.jsx file
        - create a items array
        - using map function to return item


Task 5: implement a basic toggle switch component
        - create ToggleSwitch.jsx file
        - using useState hooks to check box on off with onchange event


Task 6: create a component that fetches data from an api and display it
        - create FetchesAPI.jsx file
        - using useEffect hooks to fetches data and 
        - store useState hooks inside 
        - using map filter to show data


Task 7: build a timer that counts down from a specified time
        - create Timer.jsx file
        - using useState hooks to store timer and
        - using a useEffect hooks to drecement time -1 second with setTimeout


Task 8: implement a simple to-do list application with add and remove functionality
        - create ToDo.jsx file
        - using a two useState hooks for store input and todo values
        - using a two function


Task 9: create a component that changes its background color when clicked
        - Background.jsx file
        - using a useState hooks for store color with onclick event


Task 10: build a basic routing setup with react router
         - Routing.jsx file
         - install : npm i react-router-dom
         - using BrowserRouter, Routes, Route, Link, components
         - create a navbar like 


Task 11: create a component that displays a random quote each time it is rendered
          - Quote.jsx file
          - using a useState hooks for store quote
          - create a quotes array and generate a random number using math function with quotes length
          - create a button to change quote


Task 12: build a file uploader component that allows users to upload images
          - FileUploader.jsx file
          - using useState hooks for store file
          - using a input type file and onchange event callback functions to get e.target.files[0]
          - create a img using URL.createObjectURL


Task 13: implement a basic authentication form with login and registration
          - Auth.jsx file
          - first create a 5 state using useState hooks for data store
          - create a two function for handleauth and handlelogout
          - using a conditional rendering for login and register form


Task 14: Develop a weather app that fetches and display weather information based on a user's locations
          - WeatherApp.jsx file
          - using two hooks to store city name and weather data
          - using axios to get data and set
          - create a input field for city name and button to get weather data
          - using conditional rendering to display weather data
          - using a API key from openweathermap.org
          - using a async await function to get data
          - using a try catch block to handle error ❌
          - using a loading state to display loading message when data is fetching ❌
          - using a error state to display error message when data is not fetching ❌


Task 15: build a search bar that filters a list of items based on user input
          - SearchBar.jsx file
          - create a one lists array to pass like props
          - using useState hooks for store search value
          - using a placeholder text in input field
          - using a input field for search value and onchange event callback functions to get e.target.value
          - create a filtered list using filter method and includes method
          - using a key prop to avoid warning in react
          - using a map method to display list items
          - using a conditional rendering to display filtered list ❌
          - using a CSS to style search bar and list items ❌
          - using a autofocus attribute in input field ❌
          - using a clear button to clear search value and input field ❌


Task 16: Develop a paginations component to navigate through a large list of items
          - Pagination.jsx file
          - create a one lists array to pass like props with also pass itemparpage
          - using useState hooks for store currentPage
          - create a indexoflastitem using currentPage * itemparpage
          - create a indexoffirstitem using indexoflastitem - itemparpage
          - create a currentItems using slice method
          - create a pagenumber empty array
          - using a for loop to create pagenumber array using math ceil and push
          - using a map method to display currentItems
          - using a map method to display pagenumber array
          - using a conditional rendering to display currentItems ❌
          - using a CSS to style pagination buttons ❌
          - using a disabled attribute in pagination buttons ❌
          - using a active class in pagination buttons ❌
          - using a screen reader text in pagination buttons ❌
          - using a keyboard navigation in pagination buttons ❌


Task 17: build a color picker that allows users to select a color
          - ColorPicker.jsx file
          - using useState hooks for store selectedColor
          - using a input color field for color pick value and onchange event callback functions to get e.target.value
          - set in state and display

        
Task 18: implement a responsive navigation menu with a hamburger icon
          - NavigationMenu.jsx file
          - using useState hooks for store isOpen
          - using a button for hamburger icon and onclick event callback functions to toggle isOpen state
          - using a conditional rendering to display navigation menu items when isOpen is true
          - using a CSS to style navigation menu and hamburger icon
          - using a media query to make navigation menu responsive


Task 19: build a context provider that allows users to switch between light and dark themes, and use the context in different parts of the app to apply the selected theme.
        - ThemeContext.jsx file (first)
        - using useTheme for store theme and toggleTheme
        - using a checkbox field with onchange event and checked 

        - ThemeContext.jsx file (second)
        - create a ThemeContext using createContext
        - create a ThemeProvider using createContext.Provider
        - using a value prop to pass theme state and toggleTheme function
        - wrap the app with ThemeProvider
        

        - ThemeContext2.jsx file (third)
        - using a useContext hook to get theme state
        - using a conditional rendering to apply the selected theme
        - using a CSS to style theme


Task 20: implement a shopping cart using context and a reducer, with features like adding, removing, and updating items in the cart
          - Cart.jsx file (first)
          - create a products array to store product with id and name
          - show all product using map methods with onclick event

          - CartContext.jsx file (second)
          - create a CartContext using createContext
          - create a CartProvider using CartContext.Provider
          - using a value prop to pass cart state and dispatch function
          - wrap the app with CartProvider

          - using useReducer for store cart state and dispatch
          - using a reducer function to handle actions (ADD_TO_CART, UPDATE_QUANTITY, REMOVE_FROM_CART)
          - using a initialState for cart state


Task 21: create a simple counter application using useReducer to manage the state.
          - CounterReducer.jsx file
          - using useReducer for store count state and dispatch
          - using a reducer function to handle actions (INCREMENT, DECREMENT, RESET)
          - using a button for increment, decrement, and reset with onclick event
          - using a initialState for count state ❌
          

Task 22: create a simple to do list using useReducer to manage tasks
          - TodoReducer.jsx file
          - using useReducer for store tasks state and dispatch
          - using a reducer function to handle actions (ADD_TASK, REMOVE_TASK, UPDATE_TASK)
          - using a form to add task with onsubmit event
          - using a list to show all tasks with map methods and onclick event for remove task
          - using a conditional rendering to show task status (completed or not) ❌
          - using a initialState for tasks state ❌


Task 23: build a pagination component using useReducer to manage the currentPage and the number of item per page
          - PaginationReducer.jsx file
          - create a first data array using Array.from
          - using useReducer for store currentPage and totalItem state and dispatch
          - using useEffect to dispatch SET_TOTAL_ITEM with data.length
          - using a reducer function to handle actions (SET_TOTAL_ITEM, SET_CURRENT_PAGE)
          - using a button for next and previous page with onclick event
          - using a select to change items per page with onchange event
          - using a conditional rendering to show current page and items per page
          - using a function to calculate the total number of pages and the current page items
          - using a initialState for currentPage and itemsPerPage state ❌


Task 24: create a user authentication system using useContext to manage user login and logout states
          - UserContext.jsx file (first)
          - AuthContext.jsx file (second)
          - create a AuthContext using createContext
          - create a AuthProvider using AuthContext.Provider
          - using a value prop to pass user state and login and logout functions
          - wrap the app with UserProvider


Task 25: build a draggable component using useReducer to manage its position
          - Draggable.jsx file
          - using useReducer for store position state and dispatch
          - using a reducer function to handle actions (MOVE)
          - using a function to calculate the new position
          - using a function to handle the drag event
          - using a initialState for position state 


Task 26: create a localization system using useContext to provide translations for the entire app
          - LocalizationContext.jsx file (first)
          - create a two button with two onclick event on callback function
          - LocalizationContext.jsx file (second)
          - create a LocalizationContext using createContext
          - create a LocalizationProvider using LocalizationContext.Provider
          - using a value prop to pass translations object
          - wrap the app with LocalizationProvider


Task 27: fetch data from multiple apis and display the combined data in your component
          - combined.jsx file
          - using a useEffect to fetch data from multiple apis
          - using a function to handle the data
          - using a conditional rendering to show the data

03:45:55